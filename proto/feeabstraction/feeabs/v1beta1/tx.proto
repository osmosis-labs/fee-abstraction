syntax = "proto3";
package feeabstraction.feeabs.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "feeabstraction/feeabs/v1beta1/params.proto";
import "amino/amino.proto";

option go_package = "github.com/osmosis-labs/fee-abstraction/v8/x/feeabs/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc SendQueryIbcDenomTWAP(MsgSendQueryIbcDenomTWAP)
      returns (MsgSendQueryIbcDenomTWAPResponse);
  rpc SwapCrossChain(MsgSwapCrossChain) returns (MsgSwapCrossChainResponse);
  rpc FundFeeAbsModuleAccount(MsgFundFeeAbsModuleAccount)
      returns (MsgFundFeeAbsModuleAccountResponse);
  
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
  }
}

message MsgFundFeeAbsModuleAccount {
  string from_address = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgFundFeeAbsModuleAccountResponse {}

message MsgSendQueryIbcDenomTWAP { string from_address = 1; }

message MsgSendQueryIbcDenomTWAPResponse {}

message MsgSwapCrossChain {
  string from_address = 1;
  string ibc_denom = 2;
}
message MsgSwapCrossChainResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer)          = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  option (amino.name) = "cosmos-sdk/x/bank/MsgUpdateParams";

  // params defines the x/bank parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {
}

